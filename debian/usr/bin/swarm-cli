#!/bin/bash

# Swarm CLI wrapper script that runs the Docker container from GHCR
# This script is installed by the swarm-cli Debian package

set -e

# Configuration
REGISTRY="ghcr.io"
IMAGE_NAME="metaprovide/swarm-cli"
IMAGE_TAG="latest"
FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"

# Function to check if Docker is installed
check_docker() {
  if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in PATH" >&2
    echo "Please install Docker: https://docs.docker.com/get-docker/" >&2
    exit 1
  fi
}

# Function to check if Docker daemon is running
check_docker_running() {
  if ! docker info &> /dev/null; then
    echo "Error: Docker daemon is not running" >&2
    echo "Please start Docker and try again" >&2
    exit 1
  fi
}

# Function to pull the latest image if needed
ensure_image() {
  # Check if image exists locally
  if ! docker image inspect "${FULL_IMAGE}" &> /dev/null; then
    # Check if bundled image exists (from package installation)
    BUNDLED_IMAGE="/usr/share/swarm-cli/swarm-cli-docker-image.tar.gz"
    if [ -f "$BUNDLED_IMAGE" ]; then
      echo "Loading bundled Docker image..." >&2
      docker load -i "$BUNDLED_IMAGE"
      # Remove after loading to save disk space
      sudo rm -f "$BUNDLED_IMAGE" 2>/dev/null || rm -f "$BUNDLED_IMAGE" 2>/dev/null || true
    else
      echo "Pulling ${FULL_IMAGE}..." >&2
      docker pull "${FULL_IMAGE}"
    fi
  fi
}

# Function to update the image
update_image() {
  echo "Updating ${FULL_IMAGE}..." >&2
  docker pull "${FULL_IMAGE}"
}

# Main execution
main() {
  # Handle special --update flag
  if [ "$1" = "--update" ]; then
    check_docker
    check_docker_running
    update_image
    exit 0
  fi

  # Check prerequisites
  check_docker
  check_docker_running
  ensure_image

  # Determine if we're in a TTY
  if [ -t 0 ] && [ -t 1 ]; then
    # Interactive mode with TTY
    exec docker run --rm -it \
      --network=host \
      -v "$(pwd):/data" \
      -w /data \
      "${FULL_IMAGE}" "$@"
  else
    # Non-interactive mode (for piping, scripting, etc.)
    exec docker run --rm \
      --network=host \
      -v "$(pwd):/data" \
      -w /data \
      "${FULL_IMAGE}" "$@"
  fi
}

main "$@"
